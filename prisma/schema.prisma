// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  isActive    Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  vehicles    Vehicle[]
}

model Vehicle {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  seatingCapacity Int
  model           String
  plate           String
  price           Float
  isActive        Boolean
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  available       Boolean  @default(true)
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  email           String    @unique
  password        String
  isAcceptedTerms Boolean
  username        String?
  userRole        UserRole
  userPlan        UserPlan?
  profile         Profile?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

//Couple+
model Profile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  phoneNumber  String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  zipCode      String
  country      String
  nationality  String
  profession   String

  //Family with Children + New Arrivals
  spouseName         String?
  spouseEmailAddress String?
  numberOfChildren   Int?

  //Single/Student (above 18 years)
  studyingCourse String?
  uniCollegeName String?

  //New Arrivals
  dateofArrival DateTime?
  bio           String?

  //Executive Member
  whyJoinAsExecutiveMember                     String?
  howWouldYoulikeToServeAsPassaExecutiveMember String?
  whatInspiresYouToServeCommunity              String?
  //Volunteer Member
  whatCapacityDoYouWantToServeTheCommunity     String?

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId
  // profileRole ProfileRole
}

enum UserRole {
  SUPER_ADMIN
  CAR_RENTAL_ADMIN
  FINANCIAL
  // FANICIAL_COUPLE //$30
  // FANICIAL_FAMILY_WITH_CHILDREN //50
  // FANICIAL_SINGLE_AND_STUDENT //$20//$20
  // FANICIAL_LIFETIME_FREE //0
  // FANICIAL_DONORS //$500
  // FANICIAL_NEW_ARRIVALS //
  // EXECUTIVE
  VOLUNTEER
  // FANICIAL
  COMMUNITY
}

enum ProfileRole {
  COUPLE //$30
  FAMILY_WITH_CHILDREN //50
  SINGLE_AND_STUDENT //$20//$20
  LIFETIME_FREE //0
  DONORS //$500
  NEW_ARRIVALS //
}

enum PlanMember {
  COUPLE //$30
  FAMILY_WITH_CHILDREN //50
  SINGLE_AND_STUDENT //$20//$20
  LIFETIME_FREE //0
  // DONORS //$500
  NEW_ARRIVALS //
  EXECUTIVE
}

model Plan {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  price       Float
  member      PlanMember
  isActive    Boolean
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userPlan    UserPlan[]
}

model UserPlan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.ObjectId

  plan   Plan   @relation(fields: [planId], references: [id])
  planId String @db.ObjectId

  
  startDate  DateTime
  endDate    DateTime
  activeDate DateTime @default(now())
}

// model Post {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   slug     String    @unique
//   title    String
//   body     String
//   comments Comment[]
//   author   User      @relation(fields: [authorId], references: [id])
//   authorId String    @db.ObjectId
// }

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type
// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   post    Post   @relation(fields: [postId], references: [id])
//   postId  String @db.ObjectId
//   comment String
// }

// model User {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   email String  @unique
//   name  String?
//   posts Post[]
// }
