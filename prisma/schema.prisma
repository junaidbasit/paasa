// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  vehicles    Vehicle[]
}

model Vehicle {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  seatingCapacity Int
  category        Category @relation(fields: [vehicleId], references: [id])
  vehicleId       String   @db.ObjectId
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  email           String   @unique
  isAcceptedTerms Boolean
  username        String
  password        String
  role            Role     @default(USER)
  profile         Profile?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}
//Couple+
model Profile {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String
  lastName           String
  phoneNumber        String
  addressLine1       String
  addressLine2       String?
  city               String
  state              String
  zipCode            String
  country            String
  nationality        String
  profession         String
  //Family with Children + New Arrivals
  spouseName         String?
  spouseEmailAddress String?
  numberOfChildren   Int?
  //Single/Student (above 18 years)
  studyingCourse String?
  UniCollegeName String?
  //New Arrivals
  dateofArrival DateTime?
  bio                String
  user               User   @relation(fields: [userId], references: [id])
  userId             Int    @unique
}

enum Role {
  USER
  ADMIN
}

// model Post {
//   id       String    @id @default(auto()) @map("_id") @db.ObjectId
//   slug     String    @unique
//   title    String
//   body     String
//   comments Comment[]
//   author   User      @relation(fields: [authorId], references: [id])
//   authorId String    @db.ObjectId
// }

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type
// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   post    Post   @relation(fields: [postId], references: [id])
//   postId  String @db.ObjectId
//   comment String
// }

// model User {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   email String  @unique
//   name  String?
//   posts Post[]
// }
